I am preparing my lectures on group cohomology. This is the third time that I have thought seriously about the subject, and, just like schemes, the more I think about it using Lean and the more I re-investigate the idea, the better I understand it. I think that Patrick had a similar experience with his understanding of topology and its relationship to the theory of filters, Patrick's explanation of the theory of topological spaces, uniform spaces and filters ended up being better than Bourbaki's (for example Bourbaki got the definition wrong -- this was proved by people like I. James and formalised by people like @Johannes Hölzl . Patrick understood that topological spaces are just a special case of filters, they're neighbourhood filters, that's why filters are a really cool way to do topology.

So similarly, I am thinking today about the theory of G-modules, where G is a group and M is an abelian group, because this is the important case which has got a lot of mileage in mathematics where we're interested in the Langlands philosophy and don't give a monkeys about stupid things like groups with zero and distribs.

So I was very privileged to work with two Imperial students @Anca Ciobanu and @Shenyang Wu . Anca formalised the theory of group cohomology in low degree in her project here and Shenyang has definitions of nn-cycles and nn-coboundaries and a theory of general group cohomology here. Thanks to Patrick Massot, you can just use leanproject get to pull these working repositories onto your computer, and while they won't be compatible with modern mathlib you can just clone them and play with them as one-off repos or refactor them or abstract out some API and PR a version which compiles with mathlib master (there are no guarantees that any of my students projects compile with master, they are stand-alone pieces but can certainly be regarded as a guide to an API for the area they cover.

So I'm formalising the theory of H^0H 
0
  and when I'm trying to get the definitions working in full generality, like one is supposed to do in mathlib, I realise that the structures I need are variables {G M : Type} [monoid G] [add_comm_group M] [distrib_mul_action G M]. I could let M be an add_comm_monoid but you need groups to say almost anything interesting and it was annoying that there's two kernels in the theory of morphisms -- a monoid kernel and a group kernel -- so I just switched to add_comm_group. So I've never seen this distrib_mul_action G M before, for all I know it was invented by Kenny or Eric or one of these people who knows a lot about this kind of machinery, so I took a look at it and it's just two axioms and they made me laugh :-)

The first is smul_zero, which says r • 0 = 0 and which looks really similar to Johan's monoid_with_zero, an abstraction we are putting to good use in the application to groups with zero in valuation theory (we needed these for perfectoid spaces). And the second is smul_add : r • (x + y) = r • x + r • y which is just another distrib! Is H^0H 
0
  in some weird way the theory of distribs?

I have a lot more to say about this but I thought that this was a good place to start :-)
